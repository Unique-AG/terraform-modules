name: "Create Module Release"

on:
  workflow_call:
    inputs:
      module:
        description: "Module to release"
        required: true
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - run: |
          npm install yaml

      - id: module
        uses: actions/github-script@v7
        with:
          script: |
            const yaml = require('yaml')
            const fs = require('fs')

            const modulePath = `modules/${{ inputs.module }}/module.yaml`
            const moduleContent = fs.readFileSync(modulePath, 'utf8')
            const moduleData = yaml.parse(moduleContent)

            // Extract module name and version
            const name = moduleData.name
            const version = moduleData.version

            // Format changes as markdown
            let changeLog = ''
            if (moduleData.changes && moduleData.changes.length > 0) {
              changeLog += '### Changes\n\n'
              changeLog += moduleData.changes.map(change =>
                `- **${change.kind}**: ${change.description}`
              ).join('\n')
              changeLog += '\n\n'
            }

            // Check for compatibility data
            if (moduleData.compatibility) {
              console.log("Raw compatibility data:", JSON.stringify(moduleData.compatibility));
              const compatibilityEntries = Object.entries(moduleData.compatibility)
                .map(([key, value]) => {
                  console.log(`Processing entry - Key: '${key}', Value: '${value}', Type of Key: ${typeof key}, Type of Value: ${typeof value}`);
                  return `- \`${key}\`: \`${value}\``;
                });
              console.log("Formatted compatibility entries:", compatibilityEntries);

              if (compatibilityEntries.length > 0) {
                changeLog += '### Compatibility\n\n'
                changeLog += compatibilityEntries.join('\n')
              }
            }

            core.setOutput('name', name)
            core.setOutput('version', version)
            core.setOutput('changes', changeLog)

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_NOTES: ${{ steps.module.outputs.changes }} # must be passed as ENV else the backticks will get escaped and not shown as code
        run: |
          # Create and push tag
          git tag ${{ steps.module.outputs.name }}-${{ steps.module.outputs.version }}
          git push origin ${{ steps.module.outputs.name }}-${{ steps.module.outputs.version }}

          # Create GitHub release
          gh release create \
            ${{ steps.module.outputs.name }}-${{ steps.module.outputs.version }} \
            --title "${{ steps.module.outputs.name }}/${{ steps.module.outputs.version }}" \
            --notes "$RELEASE_NOTES" \
            --target ${{ github.sha }}
